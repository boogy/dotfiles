# -*- coding: utf-8 -*-
import os
import re
import socket
import subprocess

from libqtile.config import Drag, Key, Screen, Group, Drag, Click, Rule, Match, ScratchPad, DropDown
from libqtile.lazy import lazy
from libqtile import layout, bar, widget, hook
from libqtile.widget import Spacer


from Xlib import display as xdisplay


alt = "mod1"
sup = "mod4"
tab = "Tab"
shift = "shift"
control = "control"

TERMINAL = "alacritty"
BROWSER = "firefox"
HOME = os.path.expanduser('~')

def get_num_monitors():
    num_monitors = 0
    try:
        display = xdisplay.Display()
        screen = display.screen()
        resources = screen.root.xrandr_get_screen_resources()

        for output in resources.outputs:
            monitor = display.xrandr_get_output_info(
                output, resources.config_timestamp)
            preferred = False
            if hasattr(monitor, "preferred"):
                preferred = monitor.preferred
            elif hasattr(monitor, "num_preferred"):
                preferred = monitor.num_preferred
            if preferred:
                num_monitors += 1
    except Exception as e:
        # always setup at least one monitor
        print(e)
        return 1
    else:
        return num_monitors

def window_to_prev_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i - 1].name)

def window_to_next_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i + 1].name)

def window_to_previous_screen(qtile):
    i = qtile.screens.index(qtile.current_screen)
    if i != 0:
        group = qtile.screens[i - 1].group.name
        qtile.current_window.togroup(group)

def window_to_next_screen(qtile):
    i = qtile.screens.index(qtile.current_screen)
    if i + 1 != len(qtile.screens):
        group = qtile.screens[i + 1].group.name
        qtile.current_window.togroup(group)

def switch_screens(qtile):
    i = qtile.screens.index(qtile.current_screen)
    group = qtile.screens[i - 1].group
    qtile.current_screen.set_group(group)

keys = [

    ## Launch terminal, kill window, restart and exit Qtile
    Key([alt], "Return" , lazy.spawn(TERMINAL)),
    Key([alt, shift], "Return" , lazy.spawn(TERMINAL + ' --class=work -t work -e tmux new-session -A -s WORK')),
    Key([alt, shift] , "c"      , lazy.window.kill()),
    Key([alt], "Escape" , lazy.spawn('xkill')),
    Key([alt, shift] , "r"      , lazy.restart()),
    Key([alt, shift] , "q"      , lazy.shutdown()),

    ## Dmenu, Rofi
    Key([alt], "d" , lazy.spawn("dmenu_run -p 'Program: '")),
    Key([sup], "d" , lazy.spawn("rofi -show drun -lines 10 -columns 1 -width 45 -sidebar-mode")),
    Key([alt]            , "w" , lazy.spawn("rofi -show window")),
    Key([alt, control]   , "o" , lazy.spawn('bolt --rofi-search')),
    Key([sup]            , "e" , lazy.spawn('thunar')),

    ## Custom key bindings
    Key([alt, control]   , "w" , lazy.spawn(BROWSER)),

    ## Volume keys
    Key([], "XF86AudioMute"        , lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle")),
    Key([], "XF86AudioLowerVolume" , lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -5%")),
    Key([], "XF86AudioRaiseVolume" , lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +5%")),
    Key([], "XF86AudioMicMute"     , lazy.spawn("amixer set Capture toggle")),
    Key([], "F12"                  , lazy.spawn("amixer set Capture toggle")),

    ## Brightness Keys
    Key([], "XF86MonBrightnessUp"   , lazy.spawn("xbacklight -inc 5")),
    Key([], "XF86MonBrightnessDown" , lazy.spawn("xbacklight -dec 5")),

    ## Media keys
    Key([], "XF86Calculator" , lazy.spawn("gnome-calculator")),
    Key([], "XF86HomePage"   , lazy.spawn(BROWSER)),
    Key([], "XF86Display"    , lazy.spawn("arandr")),

    ## Toggle layouts
    Key([alt], "n"     , lazy.layout.normalize()),
    Key([alt], "space" , lazy.window.toggle_floating()),
    Key([sup], "space" , lazy.next_layout()),
    Key([alt] , "f"     , lazy.toggle_fullscreen()),

    ## Change window / groups focus
    Key([alt, sup] , "h"     , lazy.layout.previous() ), # Stack
    Key([alt, sup] , "l"     , lazy.layout.next()     ), # Stack

    Key([alt]      , "Up"    , lazy.layout.up()          ),
    Key([alt]      , "Down"  , lazy.layout.down()        ),
    Key([alt]      , "Left"  , lazy.layout.left()        ),
    Key([alt]      , "Right" , lazy.layout.right()       ),
    Key([alt]      , "k"     , lazy.layout.up()          ),
    Key([alt]      , "j"     , lazy.layout.down()        ),
    Key([alt]      , "h"     , lazy.layout.left()        ),
    Key([alt]      , "l"     , lazy.layout.right()       ),
    Key([sup]      , tab, lazy.layout.next()        ),
    Key([alt]      , tab, lazy.screen.toggle_group()),

    ## MonadTall
    Key([alt, shift] , "h" , lazy.layout.swap_left()),
    Key([alt, shift] , "l" , lazy.layout.swap_right()),
    Key([alt, shift] , "j" , lazy.layout.shuffle_down()),
    Key([alt, shift] , "k" , lazy.layout.shuffle_up()),

    ## Switch focus to a physical monitor (dual/triple set up)
    Key([alt], "e"        , lazy.next_screen()),
    #  Key([alt], "comma"  , lazy.next_screen()),
    #  Key([alt], "period" , lazy.prev_screen()),
    #  Key([alt], "w"      , lazy.to_screen(0)),
    #  Key([alt], "e"      , lazy.to_screen(1)),
    #  Key([alt], "d"      , lazy.to_screen(2)),

    ## Move windows to different physical screens
    Key([alt, shift] , "period" , lazy.function(window_to_previous_screen)),
    Key([alt, shift] , "comma"  , lazy.function(window_to_next_screen)),
    Key([alt]        , "t"      , lazy.function(switch_screens)),


    ## move next previous group
    Key([alt]  , "n"  , lazy.screen.next_group()),
    Key([alt]  , "p"  , lazy.screen.prev_group()),


    ## Resize layout
    Key([alt, control], "l",
        lazy.layout.grow_right(),
        lazy.layout.grow(),
        lazy.layout.increase_ratio(),
        lazy.layout.delete(),
        ),
    Key([alt, control], "Right",
        lazy.layout.grow_right(),
        lazy.layout.grow(),
        lazy.layout.increase_ratio(),
        lazy.layout.delete(),
        ),
    Key([alt, control], "h",
        lazy.layout.grow_left(),
        lazy.layout.shrink(),
        lazy.layout.decrease_ratio(),
        lazy.layout.add(),
        ),
    Key([alt, control], "Left",
        lazy.layout.grow_left(),
        lazy.layout.shrink(),
        lazy.layout.decrease_ratio(),
        lazy.layout.add(),
        ),
    Key([alt, control], "k",
        lazy.layout.grow_up(),
        lazy.layout.grow(),
        lazy.layout.decrease_nmaster(),
        ),
    Key([alt, control], "Up",
        lazy.layout.grow_up(),
        lazy.layout.grow(),
        lazy.layout.decrease_nmaster(),
        ),
    Key([alt, control], "j",
        lazy.layout.grow_down(),
        lazy.layout.shrink(),
        lazy.layout.increase_nmaster(),
        ),
    Key([alt, control], "Down",
        lazy.layout.grow_down(),
        lazy.layout.shrink(),
        lazy.layout.increase_nmaster(),
        ),

    ## Flip left and right pains and move windows
    Key([alt, shift] , "f"   , lazy.layout.flip()),
    Key([alt, shift] , "Up"  , lazy.layout.shuffle_up()),
    Key([alt, shift] , "Down", lazy.layout.shuffle_down()),
    Key([alt]        , "m"   , lazy.layout.toggle_maximize()), # Stack

    Key([alt, shift], "Left",
        lazy.layout.swap_left(),
        lazy.layout.client_to_previous()), # Stack

    Key([alt, shift], "Right",
        lazy.layout.swap_right(),
        lazy.layout.client_to_next()), # Stack

] # END KEYS

#  matches = {
#      '1': [ Match(wm_class='work')                      ],
#      '2': [ Match(wm_class='firefox')                   ],
#      '9': [ Match(wm_class='zoom')                      ],
#      '0': [ Match(wm_class='Microsoft Teams - Preview') ],
#  }
#  groups = [
#      Group(name="1", label="", layout='max'      , position=1  , exclusive=True, matches=matches['1']),
#      Group(name="2", label="", layout='max'      , position=2  , exclusive=True, matches=matches['2']),
#      Group(name="3", label="", layout='max'      , position=3  , exclusive=True),
#      Group(name="4", label="", layout='max'      , position=4  , exclusive=True),
#      Group(name="5", label="", layout='max'      , position=5  , exclusive=True),
#      Group(name="6", label="", layout='monadtall', position=6  , exclusive=True),
#      Group(name="7", label="", layout='monadtall', position=7  , exclusive=True),
#      Group(name="8", label="", layout='monadtall', position=8  , exclusive=True),
#      Group(name="9", label="", layout='max'      , position=9  , exclusive=True, matches=matches['9']),
#      Group(name="0", label="", layout='max'      , position=10 , exclusive=True, matches=matches['0']),
#  ]
#  for i, group in enumerate(groups, 1):
#      keys.extend([
#          Key(ALT        , group.name , lazy.group[group.name].toscreen()),
#          Key([alt, shift] , group.name , lazy.window.togroup(group.name)),
#          Key(SUP__SHIFT , group.name , lazy.window.togroup(group.name), lazy.group[group.name].toscreen())
#      ])

## Allocate layouts and labels
#  groups = []
#  group_names = [
#      ("1", {'label': ""  , 'layout': 'max'       } ),
#      ("2", {'label': "s" , 'layout': 'max'       } ),
#      ("3", {'label': '"' , 'layout': 'monadtall' } ),
#      ("4", {'label': '"' , 'layout': 'max'       } ),
#      ("5", {'label': '"' , 'layout': 'max'       } ),
#      ("6", {'label': '"' , 'layout': 'monadtall' } ),
#      ("7", {'label': '"' , 'layout': 'monadtall' } ),
#      ("8", {'label': '"' , 'layout': 'monadtall' } ),
#      ("9", {'label': '"' , 'layout': 'max'       } ),
#      ("0", {'label': '"' , 'layout': 'max'       } ),
#  ]
#  groups = [Group(name, **kwargs) for name, kwargs in group_names]
#  for i, (name, kwargs) in enumerate(group_names, 1):
#      keys.extend([
#          Key([alt]        , name , lazy.group[name].toscreen()),
#          Key([alt, shift] , name , lazy.window.togroup(name)),
#          Key([sup, shift] , name , lazy.window.togroup(name), lazy.group[name].toscreen())
#      ])

groups = []
group_names = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]
group_labels = ["", "", "", "", "", "", "", "", "", ""]
group_layouts = ["max", "max", "monadtall", "max", "max", "monadtall", "monadtall", "monadtall", "max", "max"]

for i in range(len(group_names)):
    groups.append(
        Group(
            name=group_names[i],
            layout=group_layouts[i].lower(),
            label=group_labels[i])
    )

for i in groups:
    keys.extend([
        Key([alt]          , i.name, lazy.group[i.name].toscreen()),
        Key([alt]          , tab, lazy.screen.next_group()),
        Key([alt, control] , i.name, lazy.window.togroup(i.name)),
        Key([alt, shift]   , i.name, lazy.window.togroup(i.name) , lazy.group[i.name].toscreen()),
    ])


def init_layout_theme():
    return {"margin":3,
            "border_width":2,
            "border_focus": "#5e81ac",
            "border_normal": "#4c566a"
            }

layout_theme = init_layout_theme()


layouts = [
    layout.MonadTall(margin=5, border_width=2, border_focus="#5e81ac", border_normal="#4c566a"),
    layout.Max(**layout_theme),
    layout.Stack(stacks=2, **layout_theme),
    #  layout.Floating(**layout_theme),
    #  layout.MonadWide(margin=8, border_width=2, border_focus="#5e81ac", border_normal="#4c566a"),
]


## Bar colours
def init_colors():
    return [["#2E3440", "#2E3440"], # color 0
            ["#2E3440", "#2E3440"], # color 1
            ["#c0c5ce", "#c0c5ce"], # color 2
            ["#fba922", "#fba922"], # color 3
            ["#3384d0", "#3384d0"], # color 4
            ["#f3f4f5", "#f3f4f5"], # color 5
            ["#cd1f3f", "#cd1f3f"], # color 6
            ["#62FF00", "#62FF00"], # color 7
            ["#6790eb", "#6790eb"], # color 8
            ["#a9a9a9", "#a9a9a9"]] # color 9


colors = init_colors()


## Widgets
def init_widgets_defaults():
    return dict(font="UbuntuMono Nerd Font",
                fontsize = 14,
                padding = 2,
                background=colors[1])

widget_defaults = init_widgets_defaults()

def init_widgets_list():
    prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())
    widgets_list = [
        widget.GroupBox(
            font="Font Awesome 5 Free,Font Awesome 5 Brands,Font Awesome 5 Free Solid,Noto Color Emoji",
            fontsize = 14,
            margin_y = 3,
            margin_x = 0,
            padding_y = 6,
            padding_x = 5,
            borderwidth = 0,
            disable_drag = True,
            active = colors[5],
            inactive = colors[5],
            rounded = False,
            highlight_method = "block",
            this_current_screen_border = colors[8],
            foreground = colors[2],
            background = colors[1]
        ),
        widget.Sep(
            linewidth = 1,
            padding = 10,
            foreground = colors[2],
            background = colors[1]
        ),
        widget.CurrentLayout(
            font = "UbuntuMono Nerd Font",
            fontsize = 14,
            foreground = colors[5],
            background = colors[1]
        ),
        widget.Sep(
            linewidth = 1,
            padding = 10,
            foreground = colors[2],
            background = colors[1]
        ),
        widget.WindowName(font="UbuntuMono Nerd Font",
            fontsize = 14,
            foreground = colors[5],
            background = colors[1]
        ),
        widget.Sep(
            linewidth = 1,
            padding = 10,
            foreground = colors[2],
            background = colors[1]
        ),
        widget.CurrentLayoutIcon(
            foreground = colors[5],
            background = colors[1],
            padding = 0,
            scale = 0.7
        ),
        widget.Sep(
            linewidth = 1,
            padding = 10,
            foreground = colors[2],
            background = colors[1]
        ),
        widget.TextBox(
            text="🖥️ ",
            foreground=colors[6],
            background=colors[1],
            mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn(TERMINAL + ' -e gtop')},
            padding = 2,
            fontsize=12
        ),
        widget.CPU(
            format = '{load_percent}% ',
            font = "UbuntuMono Nerd Font",
            fontsize = 14,
            foreground = colors[5],
            background = colors[1],
            update_interval = 3
        ),
        widget.Sep(
            linewidth = 1,
            padding = 10,
            foreground = colors[2],
            background = colors[1]
        ),
        widget.TextBox(
            text="🧠",
            foreground=colors[4],
            background=colors[1],
            mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn(TERMINAL + ' -e htop')},
            padding = 0,
            fontsize=12
        ),
        widget.Memory(
            font="UbuntuMono Nerd Font",
            format = '{MemUsed}M/{MemTotal}M ',
            update_interval = 5,
            fontsize = 14,
            foreground = colors[5],
            background = colors[1]
        ),
        widget.Sep(
            linewidth = 1,
            padding = 10,
            foreground = colors[2],
            background = colors[1]
        ),
        widget.TextBox(
            text = "🌡️",
            padding = 2,
            foreground = colors[5],
            background = colors[1],
            mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('xsensors')},
            fontsize = 12
        ),
        widget.ThermalSensor(
            font="UbuntuMono Nerd Font",
            fontsize = 14,
            fmt = '{} ',
            foreground = colors[5],
            background = colors[1],
            threshold = 90,
            padding = 5
        ),
        widget.Sep(
            linewidth = 1,
            padding = 10,
            foreground = colors[2],
            background = colors[1]
        ),
        widget.TextBox(
            text = "🔊",
            foreground = colors[5],
            background = colors[1],
            mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn('pavucontrol')},
            padding = 0,
            fontsize = 12
        ),
        widget.Volume(
            font="UbuntuMono Nerd Font",
            fontsize = 14,
            fmt = '{} ',
            channel = 'Master',
            foreground = colors[5],
            background = colors[1],
            padding = 5
        ),
        widget.Sep(
            linewidth = 1,
            padding = 10,
            foreground = colors[2],
            background = colors[1]
        ),
        widget.Battery(
            font="Font Awesome 5 Free,Font Awesome 5 Brands,Font Awesome 5 Free Solid",
            format = '{char}{percent:2.0%}',
            charge_char = '⚡',
            discharge_char = '🔋',
            full_char = ""
        ),
        widget.BatteryIcon(
            font="Font Awesome 5 Free,Font Awesome 5 Brands,Font Awesome 5 Free Solid,Noto Color Emoji"
        ),
        widget.Sep(
            linewidth = 1,
            padding = 10,
            foreground = colors[2],
            background = colors[1]
        ),
        widget.TextBox(
            text = " 📅 ",
            padding = 0,
            fontsize=12
        ),
        widget.Clock(
            foreground = colors[5],
            background = colors[1],
            font="UbuntuMono Nerd Font",
            fontsize = 14,
            format="%Y-%M-%d %H:%M"
        ),
        widget.Sep(
            linewidth = 1,
            padding = 10,
            foreground = colors[2],
            background = colors[1]
        ),
        widget.Systray(
            background=colors[1],
            icon_size=20,
            padding=1
        ),
    ]
    return widgets_list


num_monitors = get_num_monitors()
screens = []
if num_monitors > 1:
    for m in range(num_monitors - 1):
        screens.append(
            Screen(top=bar.Bar(widgets=init_widgets_list(), opacity=1, size=20))
        )


#  widgets_list = init_widgets_list()
#  def init_widgets_screen1():
#      widgets_screen1 = init_widgets_list()
#      return widgets_screen1
#  def init_widgets_screen2():
#      widgets_screen2 = init_widgets_list()
#      return widgets_screen2
#  widgets_screen1 = init_widgets_screen1()
#  widgets_screen2 = init_widgets_screen2()
#  def init_screens():
#      return [Screen(top=bar.Bar(widgets=init_widgets_screen1(), size=26)),
#              Screen(top=bar.Bar(widgets=init_widgets_screen2(), size=26)),
#              Screen(top=bar.Bar(widgets=init_widgets_screen1(), size=26))]
#  screens = init_screens()


## Mouse config
mouse = [
    Drag([alt], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([alt], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([alt], "Button2", lazy.window.bring_to_front())
]


dgroups_key_binder = None
dgroups_app_rules = []


main = None


##### HOOKS #####
@hook.subscribe.startup_once
def start_once():
    HOME = os.path.expanduser('~')
    subprocess.call([HOME + '/.config/qtile/autostart.sh'])


## subscribe for change of screen setup, just restart if called
#  @hook.subscribe.screen_change
#  def restart_on_randr(qtile, ev):
#      # TODO only if numbers of screens changed
#      qtile.cmd_restart()


#  @hook.subscribe.client_new
#  def dialogs(window):
#      if(window.window.get_wm_type() == 'dialog'
#              or window.window.get_wm_transient_for()):
#          window.floating = True

@hook.subscribe.client_new
def floating_dialogs(window):
    dialog = window.window.get_wm_type() == 'dialog'
    transient = window.window.get_wm_transient_for()
    if dialog or transient:
        window.floating = True

@hook.subscribe.startup
def start_always():
    # Set the cursor to something sane in X
    subprocess.Popen(['xsetroot', '-cursor_name', 'left_ptr'])

@hook.subscribe.client_new
def set_floating(window):
    if (window.window.get_wm_transient_for()
            or window.window.get_wm_type() in floating_types):
        window.floating = True

#  @hook.subscribe.client_new
#  def set_floating(window):
#      floating_types = ["notification", "toolbar", "splash", "dialog"]
#      floating_roles = ["EventDialog", "Msgcompose", "Preferences"]
#      floating_names = ["Terminator Preferences"]
#
#      if (window.window.get_wm_type() in floating_types
#          or window.window.get_wm_window_role() in floating_roles
#          or window.window.get_name() in floating_names
#          or window.window.get_wm_transient_for()):
#          window.floating = True

floating_types = ["notification", "toolbar", "splash", "dialog"]


auto_fullscreen = True
follow_mouse_focus = True
bring_front_click = False
cursor_warp = True
#  floating_layout = layout.Floating(float_rules=[
#      Match(wm_type='utility'               ),
#      Match(wm_type='notification'          ),
#      Match(wm_type='toolbar'               ),
#      Match(wm_type='splash'                ),
#      Match(wm_type='dialog'                ),
#      Match(wm_class='file_progress'        ),
#      Match(wm_class='confirm'              ),
#      Match(wm_class='dialog'               ),
#      Match(wm_class='download'             ),
#      Match(wm_class='error'                ),
#      Match(wm_class='notification'         ),
#      Match(wm_class='splash'               ),
#      Match(wm_class='toolbar'              ),
#      Match(wm_class='confirmreset'         ), # gitk
#      Match(wm_class='makebranch'           ), # gitk
#      Match(wm_class='maketag'              ), # gitk
#      Match(wm_class='ssh-askpass'          ), # ssh-askpass
#      Match(title='branchdialog'            ), # gitk
#      Match(title='pinentry'                ), # GPG key password entry
#      Match(wm_class='Arandr'               ),
#      Match(wm_class='Lxappearance'         ),
#      Match(wm_class='Pavucontrol'          ),
#      Match(wm_class='Eog'                  ),
#      Match(wm_class='Evince'               ),
#      Match(wm_class='Mpv'                  ),
#      Match(wm_class='Gnome-calculator'     ),
#      Match(wm_class='File-roller'          ),
#      Match(wm_class='Remmina'              ),
#      Match(wm_class='zoom'                 ),
#      Match(wm_class='Nm-connection-editor' ),
#      Match(wm_class='Blueman-manager'      ),
#  ], fullscreen_border_width = 0, border_width = 0)

floating_layout = layout.Floating(float_rules=[
    {'wmclass': 'confirm'       },
    {'wmclass': 'dialog'        },
    {'wmclass': 'download'      },
    {'wmclass': 'error'         },
    {'wmclass': 'file_progress' },
    {'wmclass': 'notification'  },
    {'wmclass': 'splash'        },
    {'wmclass': 'toolbar'       },
    {'wmclass': 'Arandr'        },
    {'wname': 'branchdialog'    },
    {'wname': 'Open File'       },
    {'wmclass': 'ssh-askpass'   },

],  fullscreen_border_width = 0, border_width = 0)

focus_on_window_activation = "focus" # or smart

wmname = "LG3D"
