##########################
# CTF python snippeets   #
##########################

snippet t-pwn "pwn template for CTFs" b
#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from pwn import *

LOCAL = "remote" not in sys.argv
BINARY = "${1:binary_name}"

elf = ELF(BINARY)
context(terminal = ["tmux", "splitw"])
context.update(binary=elf)
context.log_level "debug" if "debug" in sys.argv else "info"

LIBC = None

if LOCAL:
    r = remote("127.0.0.1", 1337)
else:
    r = remote("${2:ip_address}", ${3:port})

libc = ELF(LIBC) if LIBC else elf.libc
system = libc.symbols["system"]

if "gdb" in sys.argv:
	gdb_cmd = []
	gdb_cmd.append("""
	b *0x31337
	""")
	gdb_cmd.append("c")
	gdb_cmd = "\n".join(gdb_cmd)
    gdb.attach(BINARY, execute=gdb_cmd)


# OR USE
# flat(0, 0x424242, "ABCDEFGH", -0x1337, sign=True)
def rop(rop):
	"""Pack array of addresses"""
	return "".join(pack(_) for _ in rop)

$0

endsnippet

snippet t-fmtstr "format string leak template" b
def fmt_string(payload):
	r.sendline(payload)

log.info("Format string leak")
for offset in range(100):
    payload = ("%" + str(offset) + "$llx.").ljust(64, "B") + "A" * 16
	fmt_string(payload)
	leak = r.readuntil("\n").split(".BBBBBB")[0]
	print("Offset %d: %s" % (offset, leak))
	if offset == OFFSET_TO_CHOOSE:
	    libc_leak = int(leak, 16)
	if leak == ("A"*8).encode("hex"):
	    break

endsnippet

# vim:ft=snippets:

