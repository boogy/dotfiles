##################################
# Custom misc python snippeets   #
##################################

snippet zip "python zip completion" b
zip(${1:array1}, ${2:array2})
endsnippet

snippet format "short .format access" b
"{0}{1}".format(${1:param1}, ${2:param2})
endsnippet

snippet argparse "create command line interface" b
parser = argparse.ArgumentParser(description='${1:description}')
parser.add_argument(
	'${2:${VISUAL:--verbose}}',
	help='${3:${VISUAL:Run in verbose mode}}'
	action='store_true',
)
parser.add_argument(
	'${4:${VISUAL:--test}}',
	help='${5:help for arg1}'
	action='store_true',
)
parser.add_argument(
	'${6:${VISUAL:infile}}',
	help="${7:${VISUAL:Input file}}",
	dest="infile"
	type=argparse.FileType('r')
)
parser.add_argument(
	'${8:${VISUAL:-o}}',
	'${9:${VISUAL:--outfile}}',
	help="${10:${VISUAL:Output file}}",
	dest="outfile"
	default=sys.stdout,
	type=argparse.FileType('w')
)
args = parser.parse_args()

$0

endsnippet

snippet p-exec "execute command with subprocess" b
out = subprocess.Popen("${1:command}".split(),
						stderr=subprocess.PIPE,
						stdour=subprocess.PIPE,
						stdin=subprocess.PIPE,
						shell=${2:True})
endsnippet

snippet read-file "read data from a file and return content" b

def read(path):
    """Open file, return content."""
    path = os.path.expanduser(os.path.expandvars(path))
    if os.path.isfile(path) and os.access(path, os.R_OK):
        with open(path) as fd:
            return fd.read()
    else:
        print("ERROR: %s is not a file or it is not readable" % path)

endsnippet

snippet write-file "write data to a file" b
def write(path, data, create_dir=False):
    """Create new file or truncate existing to zero length and write data."""
    path = os.path.expanduser(os.path.expandvars(path))
    if create_dir:
        path = os.path.realpath(path)
        ds = path.split('/')
        f = ds.pop()
        p = '/'
        while True:
            try:
                d = ds.pop(0)
            except:
                break
            p = os.path.join(p, d)
            if not os.path.exists(p):
                os.mkdir(p)
    with open(path, 'w') as f:
        f.write(data)

endsnippet

snippet is-printable "function to identify ascii caracters" b
def is_printable(text, printables=""):
    """Check if a string is printable"""
    return (set(str(text)) - set(string.printable + printables) == set())

endsnippet

snippet tmp-file "create temp file" b
def tmpfile(pref="lalib-"):
    """Create and return a temporary file with custom prefix"""
    import tempfile
    return tempfile.NamedTemporaryFile(prefix=pref)

endsnippet

snippet bash "create bash function to run system commands" b
def bash(cmd, cmd_input=None, timeout=None, return_stderr=False):
    """Execute cmd and return stdout and stderr in a tuple
    @cmd: the command to execute
    @cmd_input: input to give to the command
    @timeout: timeout for the command
    @return_stderr: true/false return stderr
    """
    p = subprocess.Popen(['/bin/bash', '-c', cmd],
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    if timeout is None:
        o, e = p.communicate(cmd_input)
    else:
        t = time.time()
        while time.time() - t < timeout:
            time.sleep(0.01)
            if p.poll() is not None:
                break
        if p.returncode is None:
            p.kill()
        o, e = p.communicate()
    if return_stderr:
        return o, e
    return o

endsnippet

snippet rol "rotate left function" b
def rol(val, places):
    """Rotate val left by n places"""
    shift = places % 32
    val = (val << shift) + (val >> (32-shift))
    val &= 0xFFFFFFFF
    return val

endsnippet

snippet ror "rotate left function" b
def ror(val, places):
    """Rotate val right by n places"""
    shift = places % 32
    val = (val >> shift) + (val << (32-shift))
    val &= 0xFFFFFFFF
    return val

endsnippet

snippet to-address "convert integer to address format" b
def to_address(num):
    """Convert a number to address format in hex"""
    if num < 0:
        return to_hex(num)
    if num > 0xffffffff:  # 64 bit
        return "0x%016x" % num
    else:
        return "0x%08x" % num

endsnippet

snippet xor "xor function" b
def xor(data, key):
    return ''.join(chr(ord(x) ^ ord(y)) for (x,y) in itertools.izip(data, itertools.cycle(key)))

endsnippet

snippet validate "assert that no bad char is in data" b
def validate(data, badchars):
    """Assert that no badchar occurs in data."""
    assert(all(b not in data for b in badchars))

endsnippet

snippet pyscript "custom python script template" b
#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""A simple python script template.

"""

from __future__ import print_function
import os
import sys
import argparse

def main(arguments):
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('infile', help="Input file", type=argparse.FileType('r'))
    parser.add_argument('-o', '--outfile', help="Output file",
                        default=sys.stdout, type=argparse.FileType('w'))

    args = parser.parse_args(arguments)
    print(args)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))

endsnippet
