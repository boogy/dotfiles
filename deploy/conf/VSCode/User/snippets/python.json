{
	"python shebang": {
		"prefix": "#!",
		"body": [
		  "#!/usr/bin/env python${1:2}",
		  "# -*- coding: utf-8 -*-"
		],
		"description": "python shebang"
	},
	"python zip completion": {
		"prefix": "zip",
		"body": [
		  "zip(${1:array1}, ${2:array2})"
		],
		"description": "python zip completion"
	},
	"short .format access": {
		"prefix": "format",
		"body": [
		  "\"{0}{1}\".format(${1:param1}, ${2:param2})",
		  ""
		],
		"description": "short .format access"
	},
	"execute command with subprocess": {
		"prefix": "p-exec",
		"body": [
		  "out = subprocess.Popen(\"command\".split(),",
		  "                        stderr=subprocess.PIPE,",
		  "                        stdour=subprocess.PIPE,",
		  "                        stdin=subprocess.PIPE,",
		  "                        shell=True)"
		],
		"description": "execute command with subprocess"
	},
	"read data from a file and return content": {
		"prefix": "read-file",
		"body": [
		  "def read(path):",
		  "    \"\"\"Open file, return content.\"\"\"",
		  "    path = os.path.expanduser(os.path.expandvars(path))",
		  "    if os.path.isfile(path) and os.access(path, os.R_OK):",
		  "        with open(path) as fd:",
		  "            return fd.read()",
		  "    else:",
		  "        print(\"ERROR: %s is not a file or it is not readable\" % path)"
		],
		"description": "read data from a file and return content"
	},
	"write data to a file": {
		"prefix": "write-file",
		"body": [
		  "def write(path, data, create_dir=False):",
		  "    \"\"\"Create new file or truncate existing to zero length and write data.\"\"\"",
		  "    path = os.path.expanduser(os.path.expandvars(path))",
		  "    if create_dir:",
		  "        path = os.path.realpath(path)",
		  "        ds = path.split('/')",
		  "        f = ds.pop()",
		  "        p = '/'",
		  "        while True:",
		  "            try:",
		  "                d = ds.pop(0)",
		  "            except:",
		  "                break",
		  "            p = os.path.join(p, d)",
		  "            if not os.path.exists(p):",
		  "                os.mkdir(p)",
		  "    with open(path, 'w') as f:",
		  "        f.write(data)",
		  ""
		],
		"description": "write data to a file"
	},
	"function to identify ascii caracters": {
		"prefix": "is-printable",
		"body": [
		  "def is_printable(text, printables=\"\"):",
		  "    \"\"\"Check if a string is printable\"\"\"",
		  "    return (set(str(text)) - set(string.printable + printables) == set())"
		],
		"description": "function to identify ascii caracters"
	},
	"create temp file": {
		"prefix": "tmp-file",
		"body": [
		  "def tmpfile(pref=\"lalib-\"):",
		  "    \"\"\"Create and return a temporary file with custom prefix\"\"\"",
		  "    import tempfile",
		  "    return tempfile.NamedTemporaryFile(prefix=pref)"
		],
		"description": "create temp file"
	},
	"create bash function to run system commands": {
		"prefix": "bash",
		"body": [
		  "def bash(cmd, cmd_input=None, timeout=None, return_stderr=False):",
		  "    \"\"\"Execute cmd and return stdout and stderr in a tuple",
		  "    @cmd: the command to execute",
		  "    @cmd_input: input to give to the command",
		  "    @timeout: timeout for the command",
		  "    @return_stderr: true/false return stderr",
		  "    \"\"\"",
		  "    p = subprocess.Popen(['/bin/bash', '-c', cmd],",
		  "                         stdin=subprocess.PIPE,",
		  "                         stdout=subprocess.PIPE,",
		  "                         stderr=subprocess.PIPE)",
		  "    if timeout is None:",
		  "        o, e = p.communicate(cmd_input)",
		  "    else:",
		  "        t = time.time()",
		  "        while time.time() - t < timeout:",
		  "            time.sleep(0.01)",
		  "            if p.poll() is not None:",
		  "                break",
		  "        if p.returncode is None:",
		  "            p.kill()",
		  "        o, e = p.communicate()",
		  "    if return_stderr:",
		  "        return o, e",
		  "    return o",
		  ""
		],
		"description": "create bash function to run system commands"
	},
	"rotate left function": {
		"prefix": "rol",
		"body": [
		  "def rol(val, places):",
		  "    \"\"\"Rotate val left by n places\"\"\"",
		  "    shift = places % 32",
		  "    val = (val << shift) + (val >> (32-shift))",
		  "    val &= 0xFFFFFFFF",
		  "    return val"
		],
		"description": "rotate left function"
	},
	"rotate right function": {
		"prefix": "ror",
		"body": [
		  "def ror(val, places):",
		  "    \"\"\"Rotate val right by n places\"\"\"",
		  "    shift = places % 32",
		  "    val = (val >> shift) + (val << (32-shift))",
		  "    val &= 0xFFFFFFFF",
		  "    return val",
		  ""
		],
		"description": "rotate right function"
	},
	"xor function": {
		"prefix": "xor",
		"body": [
		  "def xor(data, key):",
		  "    return ''.join(chr(ord(x) ^ ord(y)) for (x,y) in itertools.izip(data, itertools.cycle(key)))"
		],
		"description": "xor function"
	},
	"assert that no bad char is in data": {
		"prefix": "validate",
		"body": [
		  "def validate(data, badchars):",
		  "    \"\"\"Assert that no badchar occurs in data.\"\"\"",
		  "    assert(all(b not in data for b in badchars))",
		  ""
		],
		"description": "assert that no bad char is in data"
	},
	"custom python script template": {
		"prefix": "pyscript",
		"body": [
		  "#!/usr/bin/env python${1:2}",
		  "# -*- coding: utf-8 -*-",
		  "",
		  "\"\"\"A simple python script template.\"\"\"",
		  "",
		  "from __future__ import print_function",
		  "import os",
		  "import sys",
		  "import argparse",
		  "",
		  "def main(arguments):",
		  "    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)",
		  "    parser.add_argument('infile',",
		  "                        help=\"Input file\",",
		  "                        type=argparse.FileType('r'))",
		  "",
		  "    parser.add_argument('-o', '--outfile',",
		  "                        help=\"Output file\",",
		  "                        default=sys.stdout,",
		  "                        type=argparse.FileType('w'))",
		  "",
		  "    args = parser.parse_args(arguments)",
		  "    print(args)",
		  "",
		  "if __name__ == '__main__':",
		  "    sys.exit(main(sys.argv[1:]))"
		],
		"description": "custom python script template"
	},
	"create command line interface": {
		"prefix": "argparse",
		"body": [
		  "arser = argparse.ArgumentParser(description='${1:description}')",
		  "parser.add_argument(",
		  "	'${2:${VISUAL:--verbose}}',",
		  "	help='${3:${VISUAL:Run in verbose mode}}'",
		  "	action='store_true',",
		  ")",
		  "parser.add_argument(",
		  "	'${4:${VISUAL:--test}}',",
		  "	help='${5:help for arg1}'",
		  "	action='store_true',",
		  ")",
		  "parser.add_argument(",
		  "	'${6:${VISUAL:infile}}',",
		  "	help=\"${7:${VISUAL:Input file}}\",",
		  "	type=argparse.FileType('r')",
		  ")",
		  "parser.add_argument(",
		  "	'${8:${VISUAL:-o}}',",
		  "	'${9:${VISUAL:--outfile}}',",
		  "	help=\"${10:${VISUAL:Output file}}\",",
		  "	default=sys.stdout,",
		  "	type=argparse.FileType('w')",
		  ")",
		  "args = parser.parse_args()",
		  "",
		  "$0"
		],
		"description": "create command line interface"
	},
	"pwn template for CTFs": {
		"prefix": "pwn-tpl",
		"body": [
		  "#!/usr/bin/env python2",
		  "# -*- coding: utf-8 -*-",
		  "",
		  "from pwn import *",
		  "",
		  "LOCAL = \"remote\" not in sys.argv",
		  "BINARY = \"${1:binary_name}\"",
		  "",
		  "elf = ELF(BINARY)",
		  "context(terminal = [\"tmux\", \"splitw\"])",
		  "context.update(binary=elf)",
		  "context.log_level \"debug\" if \"debug\" in sys.argv else \"info\"",
		  "",
		  "LIBC = None",
		  "",
		  "if LOCAL:",
		  "    r = remote(\"127.0.0.1\", 1337)",
		  "else:",
		  "    r = remote(\"${2:ip_address}\", ${3:port})",
		  "",
		  "libc = ELF(LIBC) if LIBC else elf.libc",
		  "system = libc.symbols[\"system\"]",
		  "",
		  "if \"gdb\" in sys.argv:",
		  "	gdb_cmd = []",
		  "	gdb_cmd.append(\"\"\"",
		  "	b *0x31337",
		  "	\"\"\")",
		  "	gdb_cmd.append(\"c\")",
		  "	gdb_cmd = \"\n\".join(gdb_cmd)",
		  "    gdb.attach(BINARY, execute=gdb_cmd)",
		  "",
		  "def rop(rop):",
		  "	\"\"\"Pack array of addresses\"\"\"",
		  "	return \"\".join(pack(_) for _ in rop)",
		  "",
		  "$0"
		],
		"description": "pwn template for CTFs"
	  },
	  "format string leak template": {
		"prefix": "pwn-fmt-leak",
		"body": [
		  "def fmt_string(payload):",
		  "	r.sendline(payload)",
		  "",
		  "log.info(\"Format string leak\")",
		  "for offset in range(100):",
		  "    payload = (\"%\" + str(offset) + \"$llx.\").ljust(64, \"B\") + \"A\" * 16",
		  "	fmt_string(payload)",
		  "	leak = r.readuntil(\"\n\").split(\".BBBBBB\")[0]",
		  "	print(\"Offset %d: %s\" % (offset, leak))",
		  "	if offset == OFFSET_TO_CHOOSE:",
		  "	    libc_leak = int(leak, 16)",
		  "	if leak == (\"A\"*8).encode(\"hex\"):",
		  "	    break",
		  ""
		],
		"description": "format string leak template"
	  },
	  "write format string payload 2 by 2": {
		"prefix": "pwn-fmt-write-2",
		"body": [
		  "def two_by_two(addr, value, offset, main=False):",
		  "    hob = value >> 16",
		  "    lob = value & 0xffff",
		  "    if hob < lob:",
		  "        first = hob - 8",
		  "        second = lob - hob",
		  "        offset_1 = offset",
		  "        offset_2 = offset + 1",
		  "    else:",
		  "        first = lob - 8",
		  "        second = hob - lob",
		  "        offset_1 = offset + 1",
		  "        offset_2 = offset",
		  "    addr_1 = pack(addr)",
		  "    addr_2 = pack(addr + 2)",
		  "    if main is True:",
		  "        fs = \"{0}{1}%{2}x%{3}$hn%{4}x%{5}$hn\".format(",
		  "            \"\".join('\\x{:02x}'.format(ord(c)) for c in addr_2),",
		  "            \"\".join('\\x{:02x}'.format(ord(c)) for c in addr_1),",
		  "            first, offset_1, second, offset_2)",
		  "    else:",
		  "        fs = \"{0}{1}%{2}x%{3}$hn%{4}x%{5}$hn\".format(",
		  "            bytes(addr_2), bytes(addr_1),",
		  "            first, offset_1, second, offset_2)",
		  "    return fs"
		],
		"description": "write format string payload 2 by 2"
	  },
	  "write format string payload 1 by 1": {
		"prefix": "pwn-fmt-write-1",
		"body": [
		  "def one_by_one(addr, value, offset, main=False):",
		  "    b = [value >> 24, (value >> 16) & 0xff, (value & 0xffff) >> 8, value & 0xff]",
		  "    first = b[3] - 16",
		  "    if b[2] < b[3]:",
		  "        second = 0x100 - (b[3] - b[2])",
		  "    else:",
		  "        second = b[2] - b[3]",
		  "    if b[1] < b[2]:",
		  "        third = 0x100 - (b[2] - b[1])",
		  "    else:",
		  "        third = b[1] - b[2]",
		  "    if b[0] < b[1]:",
		  "        fourth = 0x100 - (b[1] - b[0])",
		  "    else:",
		  "        fourth = b[0] - b[1]",
		  "    fs = \"\"",
		  "    for i, delta in enumerate([first, second, third, fourth]):",
		  "        if delta > 0:",
		  "            fs += \"%{0}x%{1}$n\".format(delta, offset+i)",
		  "        else:",
		  "            fs += \"%{0}$n\".format(offset+i)",
		  "    if main is True:",
		  "        fs = \"{0}{1}{2}{3}\".format(",
		  "            \"\".join('\\x{:02x}'.format(ord(c)) for c in pack(addr)),",
		  "            \"\".join('\\x{:02x}'.format(ord(c)) for c in pack(addr+1)),",
		  "            \"\".join('\\x{:02x}'.format(ord(c)) for c in pack(addr+2)),",
		  "            \"\".join('\\x{:02x}'.format(ord(c)) for c in pack(addr+3))",
		  "        ) + fs",
		  "    else:",
		  "        fs = \"{0}{1}{2}{3}\".format(",
		  "            bytes(pack(addr)),",
		  "            bytes(pack(addr+1)),",
		  "            bytes(pack(addr+2)),",
		  "            bytes(pack(addr+3))",
		  "        ) + fs",
		  "    return fs",
		  ""
		],
		"description": "write format string payload 1 by 1"
	  }
}