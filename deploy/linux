#!/usr/bin/env bash
#
# Script to bootstrap a linux box
#
if [[ "$(uname)" != "Linux"* ]]; then
  echo "$0 : Will only run on Linux debian/ubuntu"
  exit 1
fi

export mydirectory=tools
export DEBIAN_FRONTEND=noninteractive

echo "[*] removal of default useless apps"
sudo apt remove -y --purge rhythmbox ekiga totem ubuntu-one unity-lens-music \
    unity-lens-photos unity-lens-video transmission transmission-gtk transmission-common \
    thunderbird apport gnome-mahjongg libgnome-games-support-common aisleriot gnome-sudoku

echo "[*] removal of search tools provided by unity"
sudo gsettings set com.canonical.Unity.Lenses disabled-scopes "['more_suggestions-amazon.scope', 'more_suggestions-u1ms.scope', 'more_suggestions-populartracks.scope', 'music-musicstore.scope', 'more_suggestions-ebay.scope', 'more_suggestions-ubuntushop.scope', 'more_suggestions-skimlinks.scope']"
sudo gsettings set com.canonical.Unity.Lenses remote-content-search none

echo "[*] disable guest user and remote logon"
sudo sh -c 'printf "[SeatDefaults]\ngreeter-show-remote-login=false\n" >/usr/share/lightdm/lightdm.conf.d/50-no-remote-login.conf'
sudo sh -c 'printf "[SeatDefaults]\nallow-guest=false\n" >/usr/share/lightdm/lightdm.conf.d/50-no-guest.conf'

echo "[*] installation of google-chrome"
wget -nc https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo dpkg -i google-chrome-stable_current_amd64.deb && rm -f $_

### Install 32 bit libs also
sudo dpkg --add-architecture i386
sudo apt update
sudo apt upgrade -y
sudo apt -yq install libc6:i386 libc6-dev-i386 libncurses5:i386 libstdc++6:i386

##
## Ubunu PPAs
##
sudo add-apt-repository -y ppa:libreoffice/ppa
sudo add-apt-repository -y ppa:webupd8team/java
sudo add-apt-repository -y ppa:ansible/ansible
sudo apt-get update
sudo apt-get upgrade -y

echo "[*] installation of ruby and it's requirements"
sudo apt install -y ruby ruby-dev bundler

## SNAP installs
sudo systemctl start snapd.socket
sudo snap install keepassxc
sudo snap install remmina

#echo "[*] installation of The PenTesters Framework (PTF)"
#git clone https://github.com/trustedsec/ptf.git ~/ptf

### Install the deb list of packages
DIR=$(cd $(dirname "$0"); pwd)
if [[ -f $DIR/packages/apt ]]; then
    while read line
    do
        if [[ ! "$line" =~ (^#|^$) ]]; then
            packages="$packages $line"
        fi
    done < $DIR/packages/apt
    sudo apt install -y "$packages"
fi

echo "[*] create default core tools directory"
mkdir -p ~/$mydirectory \
    && cd ~/$mydirectory
# mkdir -p ~/$mydirectory/cheatsheets
# mkdir -p ~/$mydirectory/network
# mkdir -p ~/$mydirectory/webapps
# mkdir -p ~/$mydirectory/exploits
# mkdir -p ~/$mydirectory/mobile
# mkdir -p ~/$mydirectory/wordlists
# mkdir -p ~/$mydirectory/escalation
# mkdir -p ~/$mydirectory/pwcracking
# mkdir -p ~/$mydirectory/reverse
# mkdir -p ~/$mydirectory/recon
# mkdir -p ~/$mydirectory/wireless
# mkdir -p ~/$mydirectory/windows
# mkdir -p ~/$mydirectory/linux
# mkdir -p ~/$mydirectory/postexploitation

## Install powerline patched fonts
echo "[*] install powerline fonts"
bash $PWD/conf/fonts/install.sh

### Install python modules
sudo apt -y install python2.7 python-pip python3 python3-pip
# sudo pip2 install --upgrade pip
# sudo pip2 install --upgrade setuptools
pip2 install --upgrade --user r2pipe
pip2 install --upgrade --user isort
pip2 install --upgrade --user psutil
pip2 install --upgrade --user capstone
pip2 install --upgrade --user unicorn
pip2 install --upgrade --user keystone-engine
pip2 install --upgrade --user requests
pip2 install --upgrade --user pylint
pip2 install --upgrade --user pelican
pip2 install --upgrade --user pexpect
pip2 install --upgrade --user markdown
pip2 install --upgrade --user pycrypto
pip2 install --upgrade --user pwntools
pip2 install --upgrade --user xortool
pip2 install --upgrade --user scapy
pip2 install --upgrade --user ecdsa
pip2 install --upgrade --user matplotlib
### python3 modules
# sudo pip3 install --upgrade pip
# sudo pip3 install --upgrade setuptools
pip3 install --upgrade --user requests
pip3 install --upgrade --user pylint
pip3 install --upgrade --user pexpect-u
pip3 install --upgrade --user Pillow
pip3 install --upgrade --user numpy
pip3 install --upgrade --user pexpect
pip3 install --upgrade --user capstone
pip3 install --upgrade --user keystone-engine
pip3 install --upgrade --user unicorn
pip3 install --upgrade --user fierce
pip3 install --upgrade --user i3-py
pip3 install --upgrade --user quickswitch-i3 --user


## Install docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install -y docker-ce
sudo usermod -aG docker ${USER}


### Some must have cool tools
mkdir -p ~/$mydirectory && cd $_
git clone https://github.com/longld/peda.git
git clone https://github.com/pwndbg/pwndbg.git
git clone https://github.com/mschwager/fierce.git
git clone https://github.com/darkoperator/dnsrecon.git


## Install radare2
cd ~/$mydirectory
git clone https://github.com/radare/radare2
cd radare2
sudo ./sys/install.sh


## Capstone for pwndbg
cd ~/$mydirectory
git clone https://github.com/aquynh/capstone
cd capstone
git checkout -t origin/next
sudo ./make.sh install
cd bindings/python
sudo python3 setup.py install


## Replace ROPGadget with rp++
cd ~/$mydirectory
apt-get -yq install  cmake libboost-all-dev clang-3.5
export CC=/usr/bin/clang-3.5
export CXX=/usr/bin/clang++-3.5
git clone https://github.com/0vercl0k/rp.git
cd rp
git checkout next
git submodule update --init --recursive
# little hack to make it compile
sed -i 's/find_package(Boost 1.59.0 COMPONENTS flyweight)/find_package(Boost)/g' CMakeLists.txt
mkdir build && cd build && cmake ../ && make && cp ../bin/rp-lin-x64 /usr/local/bin/


## Install ROPGadget
cd ~/$mydirectory
git clone https://github.com/JonathanSalwan/ROPgadget \
    && cd ROPgadget \
    && python setup.py install


## Install Z3 Prover
cd ~/$mydirectory
git clone https://github.com/Z3Prover/z3.git \
    &&cd z3 \
    && python scripts/mk_make.py --python \
    && cd build \
    && sudo make install \


## Install binwalk
# cd ~/$mydirectory
# git clone https://github.com/devttys0/binwalk
# cd binwalk
# python setup.py install
# apt-get -yq install squashfs-tools

###
### CRACKING
###
# echo "[*] install john the ripper"
# cd ~/$mydirectory
# # https://github.com/magnumripper/JohnTheRipper/issues/1093#issuecomment-78090087
# sudo apt-get install build-essential libssl-dev git yasm libgmp-dev libpcap-dev pkg-config libbz2-dev
# wget http://www.openwall.com/john/j/john-1.8.0-jumbo-1.tar.gz
# tar -xvzf john-1.8.0-jumbo-1.tar.gz && rm -f $_
# cd john-1.8.0-jumbo-1/src
# sed -i 's/#define MAYBE_INLINE_BODY MAYBE_INLINE/#define MAYBE_INLINE_BODY/g' MD5_std.c
# ./configure
# make -s clean
# make
# rm -f john-1.8.0-jumbo-1.tar.gz

echo "[*] install john the ripper magnumripper version"
cd ~/$mydirectory
git clone https://github.com/magnumripper/JohnTheRipper.git
cd JohnTheRipper/src
./configure
make -s clean && make -j8

### CRACKING END

###
### WEBAPPS
###

echo "[*] install nikto"
cd ~/$mydirectory
git clone https://github.com/sullo/nikto.git


echo "[*] install sqlmap"
cd ~/$mydirectory
git clone https://github.com/sqlmapproject/sqlmap.git


###
### EXPLOITS
###
# echo "[*] install tools for priv escalation"
# cd ~/$mydirectory
# git clone https://github.com/samratashok/nishang.git
# git clone https://github.com/jaredhaight/PSAttack.git
# git clone https://github.com/rebootuser/LinEnum.git
# git clone https://github.com/pentestgeek/smbexec.git
# cd ~/$mydirectory/smbexec && bundle install

### EXPLOITS END

###
### NETWORK
###
echo "[*] install impacket"
cd ~/$mydirectory
git clone https://github.com/CoreSecurity/impacket.git
cd ~$mydirectory/impacket
pip2 install . --user


echo "[*] install Responder"
cd ~/$mydirectory
git clone https://github.com/SpiderLabs/Responder.git

### NETWORK END


### CFORENSIC
echo "[*] install volatility framework"
cd ~/$mydirectory
git clone https://github.com/volatilityfoundation/volatility.git
### CFORENSIC END


###
### CRYPRO
###
# echo "[*] install tools to identify hashes"
# cd ~/$mydirectory
# git clone https://github.com/SmeegeSec/HashTag.git
# ln -sf ~/$mydirectory/HashTag/HashTag.py ~/bin/
### CRYPRO END


###
### CHEATSHEETS
###
# echo "[*] gathering cheatsheets"
# cd ~/$mydirectory/cheatsheets
# git clone https://github.com/HarmJ0y/CheatSheets
# git clone https://github.com/aramosf/sqlmap-cheatsheet.git
# git clone https://github.com/paragonie/awesome-appsec.git
# cd ~/$mydirectory

###
### Housekeeping
###
echo "[*] clean packages downloaded"
sudo apt autoclean -y
## this will install the requirements for chrome.
sudo apt -y install -f

